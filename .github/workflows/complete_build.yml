name: Complete Build with Rust Submodule

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'lib/**'
      - 'pubspec.yaml'
      - '.github/workflows/complete_build.yml'
      - 'macos/**'
      - 'windows/**'

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Clone Rust library repository
      - name: Clone Rust library repository
        run: |
          git clone https://github.com/mobile247/activity-monitor.git rust_lib
      
      # Build Rust library for macOS
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build Rust library for macOS
        run: |
          cd rust_lib
          cargo build --release
      
      # Set up Flutter and build macOS app
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.x'
          channel: 'stable'
      
      - name: Enable macOS desktop
        run: flutter config --enable-macos-desktop
      
      # Create a temporary Flutter project with desktop support
      - name: Create temporary Flutter project
        run: |
          # Create a temp directory outside the main project
          mkdir -p ../temp_flutter_project
          cd ../temp_flutter_project
          
          # Create a new Flutter project with desktop support
          flutter create --platforms=macos,windows temp_app
          
          # Copy the desktop directories back to the main project
          cd temp_app
          cp -R macos ../../activity-monitor-app/
          cp -R windows ../../activity-monitor-app/
          cd ../../activity-monitor-app/
      
      # Create macOS library directory and copy dylib
      - name: Copy dylib to Flutter project
        run: |
          mkdir -p macos/Libraries
          cp rust_lib/target/release/libactivity_monitor.dylib macos/Libraries/
      
      # Update Podfile with the copy phase
      - name: Update Podfile
        run: |
          cat > macos/Podfile << 'EOL'
          platform :osx, '10.14'

          # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }

          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
            end

            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
          end

          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

          flutter_macos_podfile_setup

          target 'Runner' do
            use_frameworks!
            use_modular_headers!

            flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
            
            # Copy libactivity_monitor.dylib to Frameworks during build
            script_phase :name => 'Copy Rust Library',
                         :script => 'cp "${SRCROOT}/Libraries/libactivity_monitor.dylib" "${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/"',
                         :execution_position => :before_compile
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_macos_build_settings(target)
              
              # Add entitlements for input monitoring
              target.build_configurations.each do |config|
                config.build_settings['ENABLE_HARDENED_RUNTIME'] = 'YES'
                config.build_settings['OTHER_CODE_SIGN_FLAGS'] = '--options=runtime'
                
                # Ensure minimum deployment target is set correctly
                config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '10.14'
              end
            end
          end
          EOL
      
      # Create entitlements file
      - name: Create entitlements file
        run: |
          cat > macos/Runner/Runner.entitlements << 'EOL'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>com.apple.security.app-sandbox</key>
            <false/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
            <key>com.apple.security.input.monitoring</key>
            <true/>
          </dict>
          </plist>
          EOL
      
      # Build for macOS
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Install CocoaPods
        run: |
          cd macos
          pod install
      
      - name: Build for macOS
        run: flutter build macos --release
      
      # Archive macOS build
      - name: Archive macOS build
        run: |
          cd build/macos/Build/Products/Release
          ls -la
          # Use find to get the actual app name
          APP_NAME=$(find . -name "*.app" -type d -depth 1 | sed 's|^\./||')
          echo "Found app: $APP_NAME"
          if [ -n "$APP_NAME" ]; then
            zip -r activity_monitor_macos.zip "$APP_NAME"
            mv activity_monitor_macos.zip ../../../../../
          else
            echo "No .app bundle found!"
            exit 1
          fi
          
      # Upload artifacts
      - name: Upload macOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: activity_monitor_macos
          path: activity_monitor_macos.zip
          retention-days: 7
  
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Clone Rust library repository
      - name: Clone Rust library repository
        run: |
          git clone https://github.com/mobile247/activity-monitor.git rust_lib
      
      # Build Rust library for Windows
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      # Fix the Windows build error
      - name: Fix Windows build error
        run: |
          $windowsPath = "rust_lib/src/windows.rs"
          $content = Get-Content -Path $windowsPath
          
          # Update keyboard hook
          $content = $content -replace "KEYBOARD_HOOK = Some\(SetWindowsHookExW\(", "KEYBOARD_HOOK = Some(SetWindowsHookExW("
          $content = $content -replace "\|\s*\)\)\);", "| )).expect(""Failed to set keyboard hook""));"
          
          # Update mouse hook
          $content = $content -replace "MOUSE_HOOK = Some\(SetWindowsHookExW\(", "MOUSE_HOOK = Some(SetWindowsHookExW("
          $content = $content -replace "\|\s*\)\)\);", "| )).expect(""Failed to set mouse hook""));"
          
          # Fix unused variable warning
          $content = $content -replace "let is_genuine", "let _is_genuine"
          
          Set-Content -Path $windowsPath -Value $content
      
      - name: Build Rust DLL
        run: |
          cd rust_lib
          cargo build --release
      
      # Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.x'
          channel: 'stable'
      
      # Enable Windows desktop
      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop
      
      # Create a temporary Flutter project with desktop support
      - name: Create temporary Flutter project
        run: |
          # Create a temp directory outside the main project
          mkdir -p ../temp_flutter_project
          cd ../temp_flutter_project
          
          # Create a new Flutter project with Windows support
          flutter create --platforms=windows temp_app
          
          # Copy the Windows directory back to the main project
          cd temp_app
          xcopy /E /I windows ..\..\activity-monitor-app\windows
          cd ..\..\activity-monitor-app\
      
      # Create Windows lib directory and copy DLL
      - name: Copy DLL to Flutter project
        run: |
          New-Item -Path "windows/lib" -ItemType Directory -Force
          Copy-Item -Path "rust_lib/target/release/activity_monitor.dll" -Destination "windows/lib/"
      
      # Update CMakeLists.txt to include the DLL
      - name: Update CMakeLists.txt
        run: |
          Add-Content -Path "windows/CMakeLists.txt" -Value "`n# Copy the activity_monitor.dll to the binary location"
          Add-Content -Path "windows/CMakeLists.txt" -Value "add_custom_command(TARGET `${BINARY_NAME} POST_BUILD"
          Add-Content -Path "windows/CMakeLists.txt" -Value "  COMMAND `${CMAKE_COMMAND} -E copy_if_different"
          Add-Content -Path "windows/CMakeLists.txt" -Value "  `"`${CMAKE_CURRENT_SOURCE_DIR}/lib/activity_monitor.dll`""
          Add-Content -Path "windows/CMakeLists.txt" -Value "  `"`$<TARGET_FILE_DIR:`${BINARY_NAME}>`""
          Add-Content -Path "windows/CMakeLists.txt" -Value ")"
      
      # Create Windows manifest
      - name: Create Windows manifest
        run: |
          $manifestContent = @"
          <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
            <assemblyIdentity 
              version="1.0.0.0" 
              processorArchitecture="*" 
              name="com.mobile247.activitymonitor" 
              type="win32"
            />
            <description>Activity Monitor</description>
            
            <!-- Request administrator privileges -->
            <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
              <security>
                <requestedPrivileges>
                  <requestedExecutionLevel level="requireAdministrator" uiAccess="false" />
                </requestedPrivileges>
              </security>
            </trustInfo>
            
            <!-- Windows 10 compatibility -->
            <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
              <application>
                <!-- Windows 10 and 11 -->
                <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
              </application>
            </compatibility>
          </assembly>
          "@
          New-Item -Path "windows/runner" -ItemType Directory -Force
          Set-Content -Path "windows/runner/activity_monitor.exe.manifest" -Value $manifestContent
      
      # Update Runner CMakeLists.txt to include manifest
      - name: Update Runner CMakeLists.txt
        run: |
          Add-Content -Path "windows/runner/CMakeLists.txt" -Value "`n# Add manifest file for admin privileges"
          Add-Content -Path "windows/runner/CMakeLists.txt" -Value "set(MANIFEST_FILE `"`${CMAKE_CURRENT_SOURCE_DIR}/activity_monitor.exe.manifest`")"
          Add-Content -Path "windows/runner/CMakeLists.txt" -Value "target_sources(`${BINARY_NAME} PRIVATE `"`${MANIFEST_FILE}`")"
      
      # Get Flutter dependencies
      - name: Get Flutter dependencies
        run: flutter pub get
      
      # Build the Windows app
      - name: Build for Windows
        run: flutter build windows --release
      
      # Zip the Windows app
      - name: Prepare Windows artifacts
        run: |
          Compress-Archive -Path "build\windows\runner\Release\*" -DestinationPath "activity_monitor_windows_build.zip"
          
      # Upload the Windows artifacts
      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: activity_monitor_windows_build
          path: activity_monitor_windows_build.zip
          retention-days: 7